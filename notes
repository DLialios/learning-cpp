****************************** LANG

superfluous parentheses around function param declarations
int f(int (a)) {} <--> int f(int a) {}
int i(int(x)); // vexing parse
int i(int());  // vexing parse

reference-qualified member functions

const pointer vs pointer to const

declare/define vs initialize/assign

scope resolution operator only works on
class, enum, namespace

qualified vs unqualified names
qualified names include an associated scope
C::s_member; // s_member is qualified by class C
obj.x;	     // x is qualified by class object obj
ptr->y;	     // y is qualified by pointer to class object ptr

using declaration vs using directive
  using declaration 
    inject declarations into curr scope
  using directive 
    inject declarations into lowest common ancestor

argument-dependent lookup for
unqualified function-call expressions
(does not work with ctors)
0. look in curr namespace for matching name
1. check for declaration of: 
     - class member with same name
	- are you calling a function within the same
	  class it was defined?
	- is the function in question an operator overload?
     - func at block scope that's not a using-declaration
2. use ADL
3. resort to fallback e.g. using std::swap

lifetime extension of temporaries via rval refs
  auto vars in func scope are destroyed after
  ret val placeholder is all set; careful
  with returning dangling references

dynamic	    cast
static	    cast
reinterpret cast
const	    cast
    dynamic ->	only casts to reference type throw
		Does this polymorphic object have the
		given class in its hierarchy?

int(3) vs (int)3

obj->x;
obj.operator->()->x;
if ret val is another object of class type (not a ptr),
then chain operator->() calls until one returns a pointer

range-for semantics
Container c;
for (auto i : c)
    foo(i);
||||||||||||||||||
VVVVVVVVVVVVVVVVVV
for (auto it = c.begin(), end = c.end(); it != end; ++it) { 
    auto i = *it; 
    foo(i);
}

using auto&& in range-for because of iterators returning
temporaries or proxy refs when dereferenced

default	    init
value	    init
direct	    init
copy	    init
list	    init
aggregate   init
reference   init

dynamic dispatch through vtables

inheritance access modifiers

one unambiguous implicit conversion sequence from T1 to T2

eval order of func args is unspecified

smart pointers: unique_ptr, shared_ptr, weak_ptr

only lambdas without captures decay to function pointers
trailing returns on lambdas

conversion constructor vs conversion function;explicit keyword

compiler-generated func: =delete and =default

Rule of Zero: If you can avoid defining default operations, do
Rule of Five: If you define or =delete any copy, move, or 
              destructor function, define or =delete them all

CTOR
1) CTOR args
2) base class constructor
3) constructor member initializer list; 
   use default member initializers if missing 
4) CTOR body

default member initializers do not allow () form 

DTOR
1) DTOR body
2) run DTORs of each class member
3) invoke DTOR of parent class

ordinary member functions get 3 things:
1 access to internals of class
2 are in the scope of the class
3 must be invoked on an instance
-->friends get only 1
-->static functions get 1 and 2

new/delete expressions
    operator new() then CTOR
    DTOR then operator delete() 

placement new
::new(placement-params) type|initializer

deconstruct vs deallocate 

use RAII to achieve strong resource safety
    eliminate resource leaks for a 
    general notion of a resource
    (memory, locks, sockets, file&thread handles)

pointers to member functions
    unsigned (Bar::*ptr)() const = &yoda::Bar::roll;

const type qualifier is useless on func ret type

A “template function” is the instantiation of a “function template”

A template's declaration and definition must be in scope for use

templates are a compile-time version of duck typing

CTAD does not exist prior to c++17

the scope of a macro definition lasts until the end of its translation unit

explicit template instantiation 
    explicit parameterized type instantiation
	template class Foo<std::string>;
    explicit function template instantiation
	template void print<std::string>(std::string);
full specialization does instantiate

typename vs class 
- specifying a template: same
- use typename for dependent names
- use class for template template (< c++17)

template function overload resolution
- nontemplate functions = first-class citizens
- if there is a suitable base function template use it
- if a specialization exists (for this base) for the
  types being used then use it

template param pack vs function param pack
parameter packs indicate a sequence of length sizeof...(pack)
pack expansion on a pattern f(g(pack)...);

fold types:
- unary right fold (vals + ...) becomes 
  (vals[0] + (... + (vals[N-1] + vals[N])))
- unary left fold (... + vals) becomes
  (((vals[0] + vals[1]) + ...) + vals[N])
- binary right fold (vals + ... + 0) becomes
  (vals[0] + (... + (vals[N-1] + (vals[N] + 0))))
- binary left fold (0 + ... + vals) becomes
  ((((0 + vals[0]) + vals[1]) + ...) + vals[N])

templates
    class
    function
    alias
    variable
    deduction guides
    concepts

if constexpr() and noexcept() for compile-time code gen
 
using vs typedef vs namespace
- alias templates only work with 'using'
- typedefs are technically init-statements

all expr have a type and value category
    p(ure)rvalue lvalue x(piring)value 

string literals are lvalues because of their loc in data segment
auto str = "hello";	--> str is const char*
auto& str = "hello";	--> str is const char (&)[6]
arrays of references cannot exist b/c pointer arithmetic would be undefined

decltype(e)
    - parenthesis => 'treat this as an expression instead of an entity'
    - if the value category of expression is prvalue,
      then decltype yields T
    - if the value category of expression is lvalue,
      then decltype yields T&
    - if the value category of expression is xvalue, 
      then decltype yields T&&

universal refs and type deduction
    think first:
    can we bind to the arg?; can we construct the param from the arg?

substitution failure is not an error (SFINAE)

initializer list arg {1,2,3} is not enough for type deduction of
template parameter T (use auto keyword instead of a temporary)

std::forward is just static_cast<T&&>(t);

****************************** CONCEPTS c++20

requires-expressions define concepts
requires-clauses constrain templates and member funcs

concepts are just compile-time predicates

auto keyword in template param indicates non-type param,
the type of which is deduced at the point of instantiation
template<is_sortable auto NonTypeParameter, is_sortable TypeParameter>

a concept's first arg is omitted when using the inline syntax

see https://oleksandrkvl.github.io/2021/04/02/cpp-20-overview.html

****************************** STL

use std::list when you don't want to invalidate iterators

use std::map only if order is required

std::map<>::operator[] performs an insert if key does not exist

use std::deque for stacks/queues or a suitable adaptor

sorting and searching
    sort,binary_search
    find
iterators
    begin,rbegin,cbegin,crbegin
    advance
    back_inserter,front_inserter
    ostream_iterator,istream_iterator
    ostreambuf_iterator,istreambuf_iterator
